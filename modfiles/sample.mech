# module name
module Ca-NT

# import data from global model...
using v       from model
using celcius from model
using area    from model

# the tools module could provide a set of standardised calls
using rand          from tools
using rand_gaussian from tools

# ion channels...
# do any of these look like they would work?
using ik      from potassium
using potassium.ik from ion
using potassium.ik from ion as ik
using ik=potassium.ik from ion

# variable declarations
# all variable declarations start with 'let' keyword
# additional metadata is provided in a comma list after an option : symbol
let mA   : unit = milliamp
let htau : range, global
let mtau : range, global = 10
let pi   : const, global = 3.14

# exposing to the outside world...
# we use the global keyword to make visible to the model
# maybe an explicit method for making symbols available to other modules
# is required?
export htau

# state variable and its derivative
let h : state
let derivative(h) = (hinf-h)/htau
# or
let h : state with derivative (hinf-h)/htau

# procedures
procedure rates(v)
    let x = v + 0.01
    htau = exp(v) + x
    mtau = rand()
end

procedure trates(v)
    let qt = q10^((celsius-22)/10)
    minf=1-1/(1+exp((v-vhalfm)/km))
    hinf=1/(1+exp((v-vhalfh)/kh))

    mtau = 0.6
    htau = 1500
end

# functions must be pure (no side effects)
# in this case 'no side effects' means don't affect any mechanism/model state
# should be able to call rand(), which obviously is not pure
function double(x)
    # option 1 : a return statement
    return 2 * x
    # option 2 : the current approach
    return 2 * x
end

procedure foo()
    s = double(htau)
end
